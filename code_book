# Code Book
This codebook delineates the steps and processes in completing this course project in line with the instruction. To obtain a tidy data, this book was section into three namely: data sourcing, data loading and reviewing, and data cleaning

## Data sourcing
Prior to sourcing the data, open a new script and install and load all of the relevant R packages (like dplyr, plyr, knitr, etc) that will support the cleaning of the dataset. Additionally, ensure that the working directory is set appropriately. 
The collected data is about accelerometers from the Samsung Galaxy S smartphone and can be sourced from the below link: 
  https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip  

In sourcing the data, the code below should be used: 
  •	filelinked <-https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip

## Data loading and reviewing
The data should be loading using the following: 
  •	download.file (filelinked, destfile = "./accelerometers.zip")
  •	unzip("accelerometers.zip")
Following the loading of the data, save the script with the name: “run_analysis.R”  and continue with the cleaning process. Next, take a careful look at the data in the console using the “View” code. This stage of reviewing the data in the console will guide the cleaning process with accuracy. 

## Data cleaning
Next, closely read the data and assign each data to variables as display below: 
  •	activities <- read.table("UCI HAR Dataset/activity_labels.txt", col.names = c("code", "activity"))
  •	features <- read.table("UCI HAR Dataset/features.txt", col.names = c("n", "functions"))
  •	subject_test <- read.table("UCI HAR Dataset/test/subject_test.txt", col.names = "subject")
  •	x_test <- read.table("UCI HAR Dataset/test/X_test.txt", col.names = features$functions)
  •	y_test <- read.table("UCI HAR Dataset/test/y_test.txt", col.names = "code")
  •	subject_train <- read.table("UCI HAR Dataset/train/subject_train.txt", col.names = "subject")
  •	x_train <- read.table("UCI HAR Dataset/train/X_train.txt", col.names = features$functions)
  •	y_train <- read.table("UCI HAR Dataset/train/y_train.txt", col.names = "code")

Next, merges the training and test sets to create one data set
  •	x <- rbind(x_train, x_test)
  •	y <- rbind(y_train, y_test)
  •	subject <- rbind(subject_train, subject_test)
  •	merge_data <- cbind(subject, y, x)

Next, extracts only the measurements on the mean and standard deviation for each measurement
  •	tidydata <- merge_data %>%
  •	select (subject, code, contains("mean"), contains ("std"))

Next, uses descriptive activity names to name the activities in the data set
  •	tidydata$code <- activities[tidydata$code, 2]

Next, appropriately labels the data set with descriptive variable names
  •	names(tidydata)[2] = "activity"
  •	names(tidydata) <- gsub("Acc", "Accelerometer", names(tidydata))
  •	names(tidydata) <- gsub("Gyro", "Gyroscope", names(tidydata))
  •	names(tidydata) <- gsub("BodyBody", "Body", names(tidydata))
  •	names(tidydata) <- gsub("Mag", "Magnitude", names(tidydata))
  •	names(tidydata) <- gsub("^t", "Time", names(tidydata))
  •	names(tidydata) <- gsub("^f", "Frequency", names(tidydata))
  •	names(tidydata) <- gsub("tBody", "TimeBody", names(tidydata))
  •	names(tidydata) <- gsub("-mean()", "Mean", names(tidydata), ignore.case = TRUE)
  •	names(tidydata) <- gsub("-std()", "STD", names(tidydata), ignore.case = TRUE)
  •	names(tidydata) <- gsub("-freq", "Frequency", names(tidydata), ignore.case = TRUE)
  •	names(tidydata) <- gsub("angle", "Angle", names(tidydata))
  •	names(tidydata) <- gsub("gravity", "Gravity", names(tidydata))
	
Next, creates a second, independent tidy data set with the average of each variable, activity and subject
  •	completedata <- tidydata %>%
  •	  group_by (subject, activity) %>%
  •	  summarize_all(funs(mean))

Lastly, the file can be save as “txt”, and in others file format for sharing
  •	write.table(completedata, "completedata.txt", row.names = FALSE)
